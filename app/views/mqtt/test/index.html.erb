<div class="container mt-4">
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h3 class="card-title mb-0">Pruebas MQTT</h3>
      <div>
        <% if @mqtt_status[:connected] %>
          <span class="badge bg-success">Conectado al broker</span>
        <% else %>
          <span class="badge bg-danger">Sin conexión al broker</span>
        <% end %>
      </div>
    </div>

    <div class="card-body">
      <% if @mqtt_status[:error].present? %>
        <div class="alert alert-warning">
          <i class="fas fa-exclamation-triangle me-2"></i>
          Error de conexión: <%= @mqtt_status[:error] %>
        </div>
      <% end %>

      <div class="row mb-4">
        <div class="col-md-6">
          <div class="card bg-light">
            <div class="card-body">
              <h5 class="card-title">Configuración del Broker</h5>
              <ul class="list-unstyled mb-0">
                <li><strong>Host:</strong> <%= @mqtt_status[:host] %></li>
                <li><strong>Puerto:</strong> <%= @mqtt_status[:port] %></li>
                <li><strong>Timeout:</strong> <%= MqttClient::TIMEOUT %> segundos</li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <%= form_tag mqtt_publish_path, method: :post, class: 'mqtt-test-form', data: { turbo: false } do %>
        <div class="mb-3">
          <label class="form-label">Tópico</label>
          <%= select_tag :topic, 
              options_for_select(@topics.map { |k, v| [k.to_s.humanize, v] }), 
              class: 'form-select topic-select' %>
        </div>

        <!-- Campos para Estado_Casillero -->
        <div class="estado-casillero-fields payload-fields">
          <div class="mb-3">
            <label class="form-label">Controlador</label>
            <%= select_tag :controller_id, 
              options_from_collection_for_select(@controllers, :id, :name),
              class: 'form-select' %>
          </div>

          <div class="mb-3">
            <label class="form-label">Casillero</label>
            <%= select_tag :locker_id,
              options_from_collection_for_select(@lockers, :id, :number),
              class: 'form-select' %>
          </div>

          <div class="mb-3">
            <label class="form-label">Estado</label>
            <%= select_tag :estado,
              options_for_select([['Cerrado', 0], ['Abierto', 1]]),
              class: 'form-select' %>
          </div>
        </div>

        <!-- Campos para Cambio_dueno -->
        <div class="cambio-dueno-fields payload-fields d-none">
          <div class="mb-3">
            <label class="form-label">Controlador</label>
            <%= select_tag :controller_id, 
              options_from_collection_for_select(@controllers, :id, :name),
              class: 'form-select' %>
          </div>

          <div class="mb-3">
            <label class="form-label">Casillero</label>
            <%= select_tag :locker_id,
              options_from_collection_for_select(@lockers, :id, :number),
              class: 'form-select' %>
          </div>

          <div class="mb-3">
            <label class="form-label">Nuevo Dueño (Email)</label>
            <%= text_field_tag :new_owner, nil, class: 'form-control' %>
          </div>
        </div>

        <!-- Campos para actualizar_modelo/envio -->
        <div class="actualizar-modelo-envio-fields payload-fields d-none">
          <div class="mb-3">
            <label class="form-label">IDs de Gestos (separados por coma)</label>
            <%= text_field_tag :gesture_ids, nil, class: 'form-control',
              placeholder: 'Ej: 1,2,3,4' %>
          </div>
        </div>

        <!-- Campos para otros tópicos -->
        <div class="custom-payload-fields payload-fields d-none">
          <div class="mb-3">
            <label class="form-label">Custom Payload (JSON)</label>
            <%= text_area_tag :custom_payload, nil, class: 'form-control',
              rows: 5, placeholder: '{"key": "value"}' %>
          </div>
        </div>

        <div class="mb-3">
          <div class="form-text text-muted">
            Broker: <%= MqttClient::DEFAULT_HOST %>:<%= MqttClient::DEFAULT_PORT %>
          </div>
        </div>

        <%= submit_tag 'Publicar Mensaje', class: 'btn btn-primary' %>
      <% end %>
    </div>
  </div>
</div>

<script>
  (function() {
    // Función para actualizar los campos según el tópico seleccionado
    function updatePayloadFields(topicSelect) {
      const selectedTopic = topicSelect.value;
      console.log('Actualizando campos para tópico:', selectedTopic);
      
      // Obtener todos los campos de payload
      const allPayloadFields = document.querySelectorAll('.payload-fields');
      
      // Ocultar todos los campos
      allPayloadFields.forEach(field => {
        field.classList.add('d-none');
      });
      
      // Mostrar los campos correspondientes según el tópico
      let fieldsToShow;
      switch(selectedTopic) {
        case 'Estado_Casillero':
          fieldsToShow = document.querySelector('.estado-casillero-fields');
          break;
        case 'Cambio_dueno':
          fieldsToShow = document.querySelector('.cambio-dueno-fields');
          break;
        case 'actualizar_modelo/envio':
          fieldsToShow = document.querySelector('.actualizar-modelo-envio-fields');
          break;
        default:
          fieldsToShow = document.querySelector('.custom-payload-fields');
          break;
      }
      
      if (fieldsToShow) {
        fieldsToShow.classList.remove('d-none');
        console.log('Mostrando campos:', fieldsToShow.className);
      }
    }

    // Función de inicialización
    function initializeMqttForm() {
      console.log('Inicializando formulario MQTT');
      
      const topicSelect = document.querySelector('.topic-select');
      if (!topicSelect) {
        console.error('No se encontró el selector de tópicos');
        return;
      }
      
      // Prevenir inicialización múltiple
      if (topicSelect.hasAttribute('data-initialized')) {
        console.log('Formulario ya inicializado');
        return;
      }
      
      // Marcar como inicializado
      topicSelect.setAttribute('data-initialized', 'true');
      
      // Configurar el manejador de eventos
      topicSelect.addEventListener('change', function() {
        updatePayloadFields(this);
      });
      
      // Ejecutar actualización inicial
      updatePayloadFields(topicSelect);
      
      console.log('Inicialización completada');
    }

    // Función de inicialización con reintento
    function initializeWithRetry(maxAttempts = 3, delay = 100) {
      let attempts = 0;
      
      function attempt() {
        attempts++;
        console.log(`Intento de inicialización ${attempts}`);
        
        const topicSelect = document.querySelector('.topic-select');
        if (topicSelect) {
          initializeMqttForm();
        } else if (attempts < maxAttempts) {
          console.log(`Reintentando en ${delay}ms...`);
          setTimeout(attempt, delay);
        } else {
          console.error('No se pudo inicializar después de múltiples intentos');
        }
      }
      
      attempt();
    }

    // Iniciar el proceso de inicialización
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        initializeWithRetry();
      });
    } else {
      initializeWithRetry();
    }

    // Soporte para Turbolinks si está presente
    if (typeof Turbolinks !== 'undefined') {
      document.addEventListener('turbolinks:load', function() {
        initializeWithRetry();
      });
    }

    // Backup final por si todo lo demás falla
    window.addEventListener('load', function() {
      const topicSelect = document.querySelector('.topic-select');
      if (topicSelect && !topicSelect.hasAttribute('data-initialized')) {
        initializeWithRetry();
      }
    });
  })();
</script>